package interfaz;

import dominio.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Comparator;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Fernando Gonzalez (223939) & Facundo San Andrea (258053)
 */

public class VentanaReporte extends javax.swing.JFrame implements Observador {

    public VentanaReporte(Sistema sistema) {
        initComponents();
        setModelo(sistema);
        panelGrilla.setVisible(false);
    }

    @Override
    public void actualizar() {
        //Cada vez que el modelo cambie, vuelvo a cargar la lista
        cargarListas();
        ManejadorTema.aplicarTema(this, modelo.isModoOscuro());

    }

    public void setModelo(Sistema nuevoModelo) {
        this.modelo = nuevoModelo;
        modelo.agregarObservador(this);
        actualizar(); // para refrescar datos en pantalla
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        vDetalles = new javax.swing.JFrame();
        panelDetalles = new javax.swing.JPanel();
        fechaHora = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstDetalles = new javax.swing.JList();
        btnVolver = new javax.swing.JButton();
        panelReporte = new javax.swing.JTabbedPane();
        tabHistorial = new javax.swing.JInternalFrame();
        lblVehiculo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstVehiculos = new javax.swing.JList();
        lblFechaHora = new javax.swing.JLabel();
        btnCreciente = new javax.swing.JRadioButton();
        btnDecreciente = new javax.swing.JRadioButton();
        lblMovimientos = new javax.swing.JLabel();
        btnTodos = new javax.swing.JRadioButton();
        btnEntradas = new javax.swing.JRadioButton();
        btnSalidas = new javax.swing.JRadioButton();
        btnServicios = new javax.swing.JRadioButton();
        btnConsultar = new javax.swing.JButton();
        btnExportar = new javax.swing.JButton();
        l = new javax.swing.JScrollPane();
        lstMovimientos = new javax.swing.JTable();
        tabMovimientos = new javax.swing.JInternalFrame();
        lblFecha = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        btnConsultaMov = new javax.swing.JButton();
        lblFormato = new javax.swing.JLabel();
        panelGrilla = new javax.swing.JPanel();
        lblFecha1 = new javax.swing.JLabel();
        lblFecha2 = new javax.swing.JLabel();
        lblFecha3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        tabEstadisticas = new javax.swing.JInternalFrame();
        lblServicios = new javax.swing.JLabel();
        lblEmpleados = new javax.swing.JLabel();
        lblContratos = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstServicios = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        lstEmpleados = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        lstContratos = new javax.swing.JList();
        lblResultado = new javax.swing.JLabel();
        lblMatricula = new javax.swing.JLabel();
        lblMatriculaResultado = new javax.swing.JLabel();
        lblEntrada = new javax.swing.JLabel();
        lblSalida = new javax.swing.JLabel();
        lblEntradaResultado = new javax.swing.JLabel();
        lblSalidaResultado = new javax.swing.JLabel();

        vDetalles.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        vDetalles.setTitle("Detalles Movimientos");
        vDetalles.setBounds(new java.awt.Rectangle(500, 500, 500, 500));
        vDetalles.getContentPane().setLayout(null);

        panelDetalles.setLayout(null);

        fechaHora.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        fechaHora.setText("jLabel5");
        panelDetalles.add(fechaHora);
        fechaHora.setBounds(40, 30, 520, 40);

        lstDetalles.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lstDetalles.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(lstDetalles);

        panelDetalles.add(jScrollPane2);
        jScrollPane2.setBounds(40, 90, 520, 178);

        btnVolver.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });
        panelDetalles.add(btnVolver);
        btnVolver.setBounds(220, 290, 130, 40);

        vDetalles.getContentPane().add(panelDetalles);
        panelDetalles.setBounds(10, 0, 600, 360);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        panelReporte.setToolTipText("");

        tabHistorial.setBorder(null);
        tabHistorial.setVisible(true);
        tabHistorial.getContentPane().setLayout(null);

        lblVehiculo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblVehiculo.setText("Vehiculo");
        tabHistorial.getContentPane().add(lblVehiculo);
        lblVehiculo.setBounds(20, 29, 90, 40);

        lstVehiculos.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lstVehiculos.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstVehiculos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstVehiculos.setToolTipText("");
        jScrollPane1.setViewportView(lstVehiculos);

        tabHistorial.getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 70, 250, 150);

        lblFechaHora.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lblFechaHora.setText("Ordenar por fecha / hora");
        tabHistorial.getContentPane().add(lblFechaHora);
        lblFechaHora.setBounds(320, 30, 200, 30);

        btnCreciente.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btnCreciente.setText("Creciente");
        btnCreciente.setToolTipText("");
        btnCreciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrecienteActionPerformed(evt);
            }
        });
        tabHistorial.getContentPane().add(btnCreciente);
        btnCreciente.setBounds(520, 30, 120, 30);

        btnDecreciente.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btnDecreciente.setSelected(true);
        btnDecreciente.setText("Decreciente");
        btnDecreciente.setToolTipText("");
        btnDecreciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecrecienteActionPerformed(evt);
            }
        });
        tabHistorial.getContentPane().add(btnDecreciente);
        btnDecreciente.setBounds(640, 30, 150, 30);

        lblMovimientos.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lblMovimientos.setText("Movimientos");
        tabHistorial.getContentPane().add(lblMovimientos);
        lblMovimientos.setBounds(320, 70, 120, 30);

        btnTodos.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btnTodos.setSelected(true);
        btnTodos.setText("Todos");
        btnTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTodosActionPerformed(evt);
            }
        });
        tabHistorial.getContentPane().add(btnTodos);
        btnTodos.setBounds(450, 70, 130, 30);

        btnEntradas.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btnEntradas.setText("Entradas");
        btnEntradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEntradasActionPerformed(evt);
            }
        });
        tabHistorial.getContentPane().add(btnEntradas);
        btnEntradas.setBounds(450, 100, 150, 30);

        btnSalidas.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btnSalidas.setText("Salidas");
        btnSalidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalidasActionPerformed(evt);
            }
        });
        tabHistorial.getContentPane().add(btnSalidas);
        btnSalidas.setBounds(450, 130, 180, 30);

        btnServicios.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btnServicios.setText("Servicios");
        btnServicios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServiciosActionPerformed(evt);
            }
        });
        tabHistorial.getContentPane().add(btnServicios);
        btnServicios.setBounds(450, 160, 200, 30);

        btnConsultar.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });
        tabHistorial.getContentPane().add(btnConsultar);
        btnConsultar.setBounds(430, 210, 130, 30);

        btnExportar.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btnExportar.setText("Exportar");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });
        tabHistorial.getContentPane().add(btnExportar);
        btnExportar.setBounds(580, 210, 130, 30);

        lstMovimientos.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lstMovimientos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Fecha y Hora", "Tipo", "Empleado", "Informacion"
            }
        ));
        l.setViewportView(lstMovimientos);

        tabHistorial.getContentPane().add(l);
        l.setBounds(20, 270, 700, 230);

        panelReporte.addTab("Historial", tabHistorial);

        tabMovimientos.setBorder(null);
        tabMovimientos.setVisible(true);
        tabMovimientos.getContentPane().setLayout(null);

        lblFecha.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lblFecha.setText("Fecha");
        tabMovimientos.getContentPane().add(lblFecha);
        lblFecha.setBounds(40, 20, 70, 30);
        tabMovimientos.getContentPane().add(txtFecha);
        txtFecha.setBounds(120, 20, 160, 30);

        btnConsultaMov.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btnConsultaMov.setText("Consultar");
        btnConsultaMov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaMovActionPerformed(evt);
            }
        });
        tabMovimientos.getContentPane().add(btnConsultaMov);
        btnConsultaMov.setBounds(300, 20, 130, 30);

        lblFormato.setText("(dd/MM/aaaa)");
        tabMovimientos.getContentPane().add(lblFormato);
        lblFormato.setBounds(140, 60, 120, 17);

        panelGrilla.setLayout(null);

        lblFecha1.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lblFecha1.setText("Fecha 1");
        panelGrilla.add(lblFecha1);
        lblFecha1.setBounds(160, 20, 140, 30);

        lblFecha2.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lblFecha2.setText("Fecha 2");
        panelGrilla.add(lblFecha2);
        lblFecha2.setBounds(360, 20, 140, 30);

        lblFecha3.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lblFecha3.setText("Fecha 3");
        panelGrilla.add(lblFecha3);
        lblFecha3.setBounds(560, 20, 140, 30);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel1.setText("00:00 - 05:59");
        panelGrilla.add(jLabel1);
        jLabel1.setBounds(10, 90, 100, 30);

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel2.setText("06:00 - 11:59");
        panelGrilla.add(jLabel2);
        jLabel2.setBounds(10, 180, 100, 30);

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel3.setText("12:00 - 17:59");
        panelGrilla.add(jLabel3);
        jLabel3.setBounds(10, 270, 100, 30);

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel4.setText("18:00 - 23:59");
        panelGrilla.add(jLabel4);
        jLabel4.setBounds(10, 360, 100, 30);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        panelGrilla.add(jButton1);
        jButton1.setBounds(130, 60, 200, 90);

        jButton2.setText("jButton1");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        panelGrilla.add(jButton2);
        jButton2.setBounds(130, 150, 200, 90);

        jButton3.setText("jButton1");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        panelGrilla.add(jButton3);
        jButton3.setBounds(130, 240, 200, 90);

        jButton4.setText("jButton1");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        panelGrilla.add(jButton4);
        jButton4.setBounds(130, 330, 200, 90);

        jButton5.setText("jButton1");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        panelGrilla.add(jButton5);
        jButton5.setBounds(330, 60, 200, 90);

        jButton6.setText("jButton1");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        panelGrilla.add(jButton6);
        jButton6.setBounds(330, 150, 200, 90);

        jButton7.setText("jButton1");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        panelGrilla.add(jButton7);
        jButton7.setBounds(330, 240, 200, 90);

        jButton8.setText("jButton1");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        panelGrilla.add(jButton8);
        jButton8.setBounds(330, 330, 200, 90);

        jButton9.setText("jButton1");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        panelGrilla.add(jButton9);
        jButton9.setBounds(530, 60, 200, 90);

        jButton10.setText("jButton1");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        panelGrilla.add(jButton10);
        jButton10.setBounds(530, 150, 200, 90);

        jButton11.setText("jButton1");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        panelGrilla.add(jButton11);
        jButton11.setBounds(530, 240, 200, 90);

        jButton12.setText("jButton1");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        panelGrilla.add(jButton12);
        jButton12.setBounds(530, 330, 200, 90);

        tabMovimientos.getContentPane().add(panelGrilla);
        panelGrilla.setBounds(10, 80, 750, 430);

        panelReporte.addTab("Movimientos", tabMovimientos);

        tabEstadisticas.setBorder(null);
        tabEstadisticas.setVisible(true);
        tabEstadisticas.getContentPane().setLayout(null);

        lblServicios.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblServicios.setText("Servicios mas utilizados");
        tabEstadisticas.getContentPane().add(lblServicios);
        lblServicios.setBounds(30, 30, 170, 18);

        lblEmpleados.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblEmpleados.setText("Empleados con menos movimientos");
        tabEstadisticas.getContentPane().add(lblEmpleados);
        lblEmpleados.setBounds(260, 30, 250, 20);

        lblContratos.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblContratos.setText("Clientes con mas contratos");
        tabEstadisticas.getContentPane().add(lblContratos);
        lblContratos.setBounds(510, 30, 200, 20);

        lstServicios.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lstServicios.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstServicios.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(lstServicios);

        tabEstadisticas.getContentPane().add(jScrollPane4);
        jScrollPane4.setBounds(30, 60, 210, 190);

        lstEmpleados.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lstEmpleados.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstEmpleados.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(lstEmpleados);

        tabEstadisticas.getContentPane().add(jScrollPane5);
        jScrollPane5.setBounds(260, 60, 230, 190);

        lstContratos.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lstContratos.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstContratos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane6.setViewportView(lstContratos);

        tabEstadisticas.getContentPane().add(jScrollPane6);
        jScrollPane6.setBounds(510, 60, 230, 190);

        lblResultado.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lblResultado.setText("Estadia mas larga:");
        tabEstadisticas.getContentPane().add(lblResultado);
        lblResultado.setBounds(70, 300, 170, 40);

        lblMatricula.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lblMatricula.setText("Matricula:");
        tabEstadisticas.getContentPane().add(lblMatricula);
        lblMatricula.setBounds(250, 300, 90, 50);

        lblMatriculaResultado.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lblMatriculaResultado.setText("   ");
        tabEstadisticas.getContentPane().add(lblMatriculaResultado);
        lblMatriculaResultado.setBounds(340, 300, 170, 50);

        lblEntrada.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lblEntrada.setText("Entrada: ");
        tabEstadisticas.getContentPane().add(lblEntrada);
        lblEntrada.setBounds(250, 360, 90, 50);

        lblSalida.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lblSalida.setText("Salida:");
        tabEstadisticas.getContentPane().add(lblSalida);
        lblSalida.setBounds(250, 420, 90, 50);

        lblEntradaResultado.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lblEntradaResultado.setText("      ");
        tabEstadisticas.getContentPane().add(lblEntradaResultado);
        lblEntradaResultado.setBounds(340, 360, 240, 50);

        lblSalidaResultado.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lblSalidaResultado.setText("    ");
        tabEstadisticas.getContentPane().add(lblSalidaResultado);
        lblSalidaResultado.setBounds(340, 420, 230, 50);

        panelReporte.addTab("Estadisticas", null, tabEstadisticas, "");

        getContentPane().add(panelReporte);
        panelReporte.setBounds(0, 0, 800, 580);

        setBounds(0, 0, 796, 610);
    }// </editor-fold>//GEN-END:initComponents

    private void btnDecrecienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecrecienteActionPerformed
        // TODO add your handling code here:
        btnCreciente.setSelected(false);
    }//GEN-LAST:event_btnDecrecienteActionPerformed

    private void btnCrecienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrecienteActionPerformed
        // TODO add your handling code here:
        btnDecreciente.setSelected(false);

    }//GEN-LAST:event_btnCrecienteActionPerformed

    private void btnTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodosActionPerformed
        // TODO add your handling code here:
        btnEntradas.setSelected(false);
        btnSalidas.setSelected(false);
        btnServicios.setSelected(false);
    }//GEN-LAST:event_btnTodosActionPerformed

    private void btnEntradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEntradasActionPerformed
        // TODO add your handling code here:
        btnTodos.setSelected(false);
        btnSalidas.setSelected(false);
        btnServicios.setSelected(false);
    }//GEN-LAST:event_btnEntradasActionPerformed

    private void btnSalidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalidasActionPerformed
        // TODO add your handling code here:
        btnTodos.setSelected(false);
        btnEntradas.setSelected(false);
        btnServicios.setSelected(false);
    }//GEN-LAST:event_btnSalidasActionPerformed

    private void btnServiciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServiciosActionPerformed
        // TODO add your handling code here:
        btnTodos.setSelected(false);
        btnEntradas.setSelected(false);
        btnSalidas.setSelected(false);
    }//GEN-LAST:event_btnServiciosActionPerformed

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        // TODO add your handling code here:

        // 1) obtengo el índice y el vehículo (o null si no hay selección)
        int posicion = lstVehiculos.getSelectedIndex();
        if (posicion != -1) {
            Vehiculo filtro = (Vehiculo) lstVehiculos.getModel().getElementAt(posicion);

            // 2) preparo las listas filtradas o completas
            ArrayList<Movimiento> movimientos = modelo.filtrarMovimientosPorVehiculo(modelo.getListaMovimientos(), filtro);
            ArrayList<Servicio> servicios = modelo.filtrarServiciosPorVehiculo(modelo.getListaServicios(), filtro);

            // 3) obtengo el historial según el tipo elegido
            ArrayList<String[]> listaSinOrdenar;
            if (btnTodos.isSelected()) {
                listaSinOrdenar = modelo.getHistorialCompleto(movimientos, servicios);
            } else if (btnEntradas.isSelected()) {
                listaSinOrdenar = modelo.getHistorialEntradas(movimientos);
            } else if (btnSalidas.isSelected()) {
                listaSinOrdenar = modelo.getHistorialSalidas(movimientos);
            } else { // btnServicios
                listaSinOrdenar = modelo.getHistorialServicios(servicios);
            }

            // 4) ordeno 
            boolean asc = btnCreciente.isSelected();
            ArrayList<String[]> listaOrdenada = modelo.ordenarLista(listaSinOrdenar, asc);

            // 5) muestro
            cargarDatosTabla(crearModeloTabla(), listaOrdenada);
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un vehículo para consultar.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        // TODO add your handling code here:
        int posicion = lstVehiculos.getSelectedIndex();

        if (posicion == -1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un vehículo para exportar.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        } else if (lstMovimientos.getModel().getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No hay movimientos para exportar.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        } else {

            ManejadorArchivos archivo = new ManejadorArchivos();
            String matricula = modelo.getListaVehiculos().get(posicion).getMatricula();
            archivo.crearArchivo(matricula + ".txt");

            for (int i = 0; i < lstMovimientos.getModel().getRowCount(); i++) {
                String linea = "";
                for (int j = 0; j < lstMovimientos.getModel().getColumnCount(); j++) {
                    String valor = (String) lstMovimientos.getModel().getValueAt(i, j);
                    if (valor != null) {
                        linea += valor;
                    } else {
                        linea += "";
                    }
                    linea += " ";
                }
                archivo.grabarLinea(linea.trim());
            }
            archivo.cerrar();
            JOptionPane.showMessageDialog(this, "Archivo exportado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnExportarActionPerformed

    private void btnConsultaMovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaMovActionPerformed
        DateTimeFormatter soloFecha = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        DateTimeFormatter conHora = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
        int[] rangos = new int[12]; // 3 días x 4 rangos de 6 horas

        String textoFecha = txtFecha.getText().trim();

        if (textoFecha != null && !textoFecha.isEmpty() && esFormatoValido(textoFecha)) {
            LocalDate fechaBase = LocalDate.parse(textoFecha, soloFecha);

            for (int i = 0; i < 3; i++) {
                LocalDate dia = fechaBase.plusDays(i);
                String diaStr = dia.format(soloFecha);

                // Filtrar entradas del día i
                ArrayList<Movimiento> entradasDelDia = modelo.filtrarEntradasPorFecha(modelo.getListaMovimientos(), diaStr);
                for (Movimiento mov : entradasDelDia) {
                    LocalDateTime entrada = LocalDateTime.parse(mov.getFechaEntrada(), conHora);
                    int hora = entrada.getHour();
                    int indice = (i * 4) + (hora / 6);
                    rangos[indice]++;

                }

                // Filtrar salidas del día i
                ArrayList<Movimiento> salidasDelDia = modelo.filtrarSalidasPorFecha(modelo.getListaMovimientos(), diaStr);
                for (Movimiento mov : salidasDelDia) {
                    LocalDateTime salida = LocalDateTime.parse(mov.getFechaSalida(), conHora);
                    int hora = salida.getHour();
                    int indice = (i * 4) + (hora / 6);
                    rangos[indice]++;
                }

                // Filtrar servicios del día i
                ArrayList<Servicio> servicios = modelo.getListaServicios();
                for (Servicio serv : servicios) {
                    try {
                        LocalDateTime fechaServ = LocalDateTime.parse(serv.getFecha(), conHora);
                        if (fechaServ.toLocalDate().equals(dia)) {
                            int hora = fechaServ.getHour();
                            int indice = (i * 4) + (hora / 6);
                            rangos[indice]++;
                        }
                    } catch (DateTimeParseException e) {
                        System.out.println("Formato inválido en servicio: " + serv.getFecha());
                    }
                }
            }

            //Actualizar labels de las fechas
            lblFecha1.setText(fechaBase.format(soloFecha));
            lblFecha2.setText(fechaBase.plusDays(1).format(soloFecha));
            lblFecha3.setText(fechaBase.plusDays(2).format(soloFecha));

            // Actualizar botones del 1 al 12 para traer el total y los colores
            Color verde = new Color(144, 238, 144);
            Color amarillo = new Color(255, 255, 153);
            Color rojo = new Color(255, 102, 102);

            JButton[] botones = {
                jButton1, jButton2, jButton3, jButton4,
                jButton5, jButton6, jButton7, jButton8,
                jButton9, jButton10, jButton11, jButton12
            };

            for (int i = 0; i < botones.length; i++) {
                botones[i].setText(String.valueOf(rangos[i]));

                if (rangos[i] < 5) {
                    botones[i].setBackground(verde);
                } else if (rangos[i] <= 8) {
                    botones[i].setBackground(amarillo);
                } else {
                    botones[i].setBackground(rojo);
                }
                botones[i].setOpaque(true);
                botones[i].setBorderPainted(false);
            }

            //Mostrar Grilla
            panelGrilla.setVisible(true);
            panelGrilla.repaint();
        } else {
            JOptionPane.showMessageDialog(this, "Ingrese una fecha valida.", "Consulta", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnConsultaMovActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        mostrarPanelDetalles(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        mostrarPanelDetalles(1);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        mostrarPanelDetalles(2);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        mostrarPanelDetalles(3);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        mostrarPanelDetalles(4);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        mostrarPanelDetalles(5);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        mostrarPanelDetalles(6);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        mostrarPanelDetalles(7);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        mostrarPanelDetalles(8);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        mostrarPanelDetalles(9);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        mostrarPanelDetalles(10);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        mostrarPanelDetalles(11);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void cargarListas() {
        //Historial
        lstVehiculos.setListData(modelo.getListaVehiculos().toArray());
        lstVehiculos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lstMovimientos.getTableHeader().setFont(new Font("Helvetica Neue", Font.PLAIN, 16));

        //Estadisticas  
        lstContratos.setListData(cargarClientes().toArray());
        lstServicios.setListData(cargarServicios().toArray());
        lstEmpleados.setListData(cargarEmpleados().toArray());
        String[] res =new String[3];
        res = modelo.masTiempoEnParking();
        lblMatriculaResultado.setText(res[0]);
        lblEntradaResultado.setText(res[1]);
        lblSalidaResultado.setText(res[2]);
    }

    private DefaultListModel cargarClientes() {
        ArrayList<String> nombresClientes = modelo.nombresClientesConMasContratos();
        DefaultListModel<String> modeloClientes = new DefaultListModel<>();
        for (String nombre : nombresClientes) {
            modeloClientes.addElement(nombre);
        }
        return modeloClientes;
    }

    private DefaultListModel cargarServicios() {
        ArrayList<String> serviciosMas = modelo.serviciosMasUtilizados();
        DefaultListModel<String> modeloServicios = new DefaultListModel<>();
        for (String servicio : serviciosMas) {
            modeloServicios.addElement(servicio);
        }
        return modeloServicios;
    }

    private DefaultListModel cargarEmpleados() {
        ArrayList<Empleado> empleadosMinimos = modelo.empleadosConMenosMovimientos();
        DefaultListModel<Empleado> modeloEmpleados = new DefaultListModel<>();
        for (Empleado empleado : empleadosMinimos) {
            modeloEmpleados.addElement(empleado);
        }
        return modeloEmpleados;
    }

    private DefaultTableModel crearModeloTabla() {
        String[] columnas = {"Fecha", "Tipo", "Empleado", "Informacion"};
        return new DefaultTableModel(columnas, 0); // columnas definidas, sin datos en las filas.
    }

    private void cargarDatosTabla(DefaultTableModel modeloTabla, ArrayList<String[]> datos) {
        modeloTabla.setRowCount(0); // limpia filas anteriores, si hay
        for (String[] fila : datos) {
            modeloTabla.addRow(fila);
        }
        lstMovimientos.setModel(modeloTabla);
    }

    public static boolean esFormatoValido(String fecha) {
        DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        boolean valido = false;
        try {
            LocalDate.parse(fecha, formato);
            valido = true;
        } catch (DateTimeParseException e) {
            // No hacer nada, simplemente no es válido
        }
        return valido;
    }

    //Detalles de movimientos por fecha y rango horario
    private void mostrarPanelDetalles(int indice) {
        DateTimeFormatter soloFecha = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        DateTimeFormatter conHora = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");

        int indiceDia = indice / 4;
        int rango = indice % 4;
        // Obetngo la fecha, a partir del índice del boton y comparo con los label fechas (0, 1 o 2)
        String fechaBoton;
        switch (indiceDia) {
            case 0:
                fechaBoton = lblFecha1.getText();
                break;
            case 1:
                fechaBoton = lblFecha2.getText();
                break;
            case 2:
                fechaBoton = lblFecha3.getText();
                break;
            default:
                fechaBoton = "";
                break;
        }

        //Obtengo el rango de horas del boton a partir del indice y los labels (0,1,2,3)
        String rangoSeleccionado;
        switch (rango) {
            case 0:
                rangoSeleccionado = jLabel1.getText();
                break;
            case 1:
                rangoSeleccionado = jLabel2.getText();
                break;
            case 2:
                rangoSeleccionado = jLabel3.getText();
                break;
            case 3:
                rangoSeleccionado = jLabel4.getText();
                break;
            default:
                rangoSeleccionado = "";
                break;
        }

        // Separo el rango horario para comparar
        String[] partes = rangoSeleccionado.split(" - ");
        LocalTime horaDesde = LocalTime.parse(partes[0]);
        LocalTime horaHasta = LocalTime.parse(partes[1]);

        // Lista temporal para almacenar pares (fecha/hora, contenido) que luego se ordenan
        ArrayList<Detalle> detalles = new ArrayList<>();

        // Recorro movimientos tipo Entradas
        // Si la fecha y hora están dentro del rango, se agrega al listado temporal
        for (Movimiento mov : modelo.getListaMovimientos()) {
            // Entrada
            String fechaEntradaStr = mov.getFechaEntrada();
            if (fechaEntradaStr != null && !fechaEntradaStr.isEmpty()) {
                LocalDateTime entrada = LocalDateTime.parse(fechaEntradaStr, conHora);
                if (entrada.toLocalDate().format(soloFecha).equals(fechaBoton)
                        && !entrada.toLocalTime().isBefore(horaDesde) && !entrada.toLocalTime().isAfter(horaHasta)) {
                    detalles.add(new Detalle(entrada, mov.toStringEntrada()));
                }
            }

            // Recorro movimientos tipo Salidas
            // Si la fecha y hora están dentro del rango, se agrega al listado temporal  
            String fechaSalidaStr = mov.getFechaSalida();
            if (fechaSalidaStr != null && !fechaSalidaStr.isEmpty()) {
                LocalDateTime salida = LocalDateTime.parse(fechaSalidaStr, conHora);
                if (salida.toLocalDate().format(soloFecha).equals(fechaBoton)
                        && !salida.toLocalTime().isBefore(horaDesde) && !salida.toLocalTime().isAfter(horaHasta)) {
                    detalles.add(new Detalle(salida, mov.toStringSalida()));
                }
            }
        }

        // Recorro Servicios Adicionales
        // Si la fecha y hora están dentro del rango, se agrega al listado temporal 
        for (Servicio serv : modelo.getListaServicios()) {
            String fechaServicioStr = serv.getFecha();
            if (fechaServicioStr != null && !fechaServicioStr.isEmpty()) {
                try {
                    LocalDateTime fechaServ = LocalDateTime.parse(fechaServicioStr, conHora);
                    if (fechaServ.toLocalDate().format(soloFecha).equals(fechaBoton)
                            && !fechaServ.toLocalTime().isBefore(horaDesde) && !fechaServ.toLocalTime().isAfter(horaHasta)) {
                        detalles.add(new Detalle(fechaServ, serv.toStringReporte()));
                    }
                } catch (DateTimeParseException e) {
                }
            }
        }

        if (!detalles.isEmpty()) {
            // Ordeno la lista temporal por fecha/hora (ascendente)
            detalles.sort(Comparator.comparing(d -> d.fecha));

            //Voy recorriendo y agregando, de forma ascendente
            DefaultListModel<String> modeloLista = new DefaultListModel<>();
            for (Detalle d : detalles) {
                modeloLista.addElement(d.texto);
            }

            // Muestro lista ordenada en un JList dentro de un diálogo con scroll
            JList<String> lista = new JList<>(modeloLista);
            lista.setFont(new Font("Helveitca Neue", Font.PLAIN, 16));
            lista.setVisibleRowCount(10);
            JScrollPane scroll = new JScrollPane(lista);
            scroll.setPreferredSize(new Dimension(400, 200));

            Object[] opciones = {"Volver"};

            JOptionPane.showOptionDialog(
                    this,
                    scroll,
                    "Movimientos - " + fechaBoton + " (" + rangoSeleccionado + ")",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    opciones,
                    opciones[0]
            );
        } else {
            JOptionPane.showMessageDialog(this, "No hay movimientos en ese rango.", "Detalles", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private static class Detalle {

        LocalDateTime fecha;
        String texto;

        Detalle(LocalDateTime fecha, String texto) {
            this.fecha = fecha;
            this.texto = texto;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConsultaMov;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JRadioButton btnCreciente;
    private javax.swing.JRadioButton btnDecreciente;
    private javax.swing.JRadioButton btnEntradas;
    private javax.swing.JButton btnExportar;
    private javax.swing.JRadioButton btnSalidas;
    private javax.swing.JRadioButton btnServicios;
    private javax.swing.JRadioButton btnTodos;
    private javax.swing.JButton btnVolver;
    private javax.swing.JLabel fechaHora;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane l;
    private javax.swing.JLabel lblContratos;
    private javax.swing.JLabel lblEmpleados;
    private javax.swing.JLabel lblEntrada;
    private javax.swing.JLabel lblEntradaResultado;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblFecha1;
    private javax.swing.JLabel lblFecha2;
    private javax.swing.JLabel lblFecha3;
    private javax.swing.JLabel lblFechaHora;
    private javax.swing.JLabel lblFormato;
    private javax.swing.JLabel lblMatricula;
    private javax.swing.JLabel lblMatriculaResultado;
    private javax.swing.JLabel lblMovimientos;
    private javax.swing.JLabel lblResultado;
    private javax.swing.JLabel lblSalida;
    private javax.swing.JLabel lblSalidaResultado;
    private javax.swing.JLabel lblServicios;
    private javax.swing.JLabel lblVehiculo;
    private javax.swing.JList lstContratos;
    private javax.swing.JList lstDetalles;
    private javax.swing.JList lstEmpleados;
    private javax.swing.JTable lstMovimientos;
    private javax.swing.JList lstServicios;
    private javax.swing.JList lstVehiculos;
    private javax.swing.JPanel panelDetalles;
    private javax.swing.JPanel panelGrilla;
    private javax.swing.JTabbedPane panelReporte;
    private javax.swing.JInternalFrame tabEstadisticas;
    private javax.swing.JInternalFrame tabHistorial;
    private javax.swing.JInternalFrame tabMovimientos;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JFrame vDetalles;
    // End of variables declaration//GEN-END:variables
    private Sistema modelo;
}
